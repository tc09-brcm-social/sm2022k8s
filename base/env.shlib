#!/bin/bash
VERSHLIB=1.22.shlib
	# This may not be needed, it is a derivation of the K8SVER from ../env.shlib
	# or it could be used to overwrite the K8SVER assumption
#
## DNS Domain and Certificates
#
DOMAIN=k8s.demo
	# Base Domain Name for the various Web UIs
CERTFILE="../base/k8s/k8s.pem"
	# Wild Card Certificate PEM file for the various Web UIs
KEYFILE="../base/k8s/k8s.key"
	# None-password protected private key file

#
## Default Docker Server and access
#
DOCKERHOST=
	# e.g. docker.io
	# used in the .image.registry
DOCKERUSER=
	# used in .image.image
DOCKERSERVER=
	# e.g. "https://index.docker.io/v2/"
	# default Docker Server
DOCKERREGISTRYBASE=
	# Docker Registry Base
	# May not actually be used???
DOCKERUSERNAME=
	# default Docker User Name, leave empty when no authentication required
DOCKERPASSWORD=
	# default Docker User Password, leave empty when no authentication required
DOCKEREMAIL=
	# default Docker User eMail, often optional
DOCKERSECRET=
	# name to create docker secret when needed

#
## Ingress Helm Chart Repo, Chart, Namespaces and Parameters
#
INGRESS=ingress
	# Ingress namespace
INGRESSREPO="ingress-nginx"
	# Ingress helm repository
INGRESSURL="https://kubernetes.github.io/ingress-nginx"
	# Ingress helm repository URL
INGRESSCHART="ingress-nginx"
	# Ingress Chart Name in the INGRESSREPO
INGRESSVER="--version=4.0.16"
	# Ingress Chart Version,
	# It is known to be overwritten by different versions
        # of Kubernetes
INGRESSREL="$INGRESSREPO"
	# Ingress release name
# The following INGRESS entries are for private docker registry
INGRESSHOST="$DOCKERHOST"
INGRESSUSER="$DOCKERUSER"
INGRESSSERVER="$DOCKERSERVER"
INGRESSUSERNAME="$DOCKERUSERNAME"
INGRESSPASSWORD="$DOCKERPASSWORD"
INGRESSEMAIL="$DOCKEREMAIL"
INGRESSDOCKERSECRET="$DOCKERSECRET"
	# name to create docker secret when needed
INGRESSREGISTRYBASE="$DOCKERREGISTRYBASE"

#
## Enclave Services Helm Chart Repo, Namespaces and Parameters
#
LOGGING=logging
	# logging namespace
LOGGINGTLS="logging-general-tls"
	# logging TLS secret name
LOGGINGPEM="$CERTFILE"
	# logging TLS public PEM file
LOGGINGKEY="$KEYFILE"
	# logging TLS private KEY file

ELASTICREPO=elastic
	# Elastic Search helm repository
ELASTICURL="https://helm.elastic.co/"
	# Elastic Search helm repository URL
ELASTICCHART=elasticsearch
	# Elastic Search Chart
ELASTICVER="--version=8.2.0"
	# Elastic Search Chart Version
ELASTICREL=elastic
	# Elastic Search release name
ELASTICOPCHART="eck-operator"
	# Elastic Operator Chart
ELASTICOPVER="--version=2.4.0"
	# Elastic Operator Chart Version,
ELASTICOPREL="elastic-operator"
	# Elastic Operator release name
# The following ELASTIC entries are for private docker registry
ELASTICHOST="$DOCKERHOST"
ELASTICUSER="$DOCKERUSER"
ELASTICSERVER="$DOCKERSERVER"
ELASTICUSERNAME="$DOCKERUSERNAME"
ELASTICPASSWORD="$DOCKERPASSWORD"
ELASTICEMAIL="$DOCKEREMAIL"
ELASTICDOCKERSECRET="$DOCKERSECRET"
	# name to create docker secret when needed
ELASTICREGISTRYBASE="$DOCKERREGISTRYBASE"

KIBANACHART=kibana
	# Kibana Chart
KIBANAVER="$ELASTICVER"
	# Kibana Chart Version -- use EasticSearch Version by default
KIBANAREL=kibana
	# Kibana release name
KIBANANAME="kibana.$DOMAIN"
	# Kibana Web UI hostname
KIBANASECRET="$LOGGINGTLS"
	# Kibana Web host TLS secret
# The following KIBANA entries are for private docker registry
KIBANAHOST="$DOCKERHOST"
KIBANAUSER="$DOCKERUSER"
KIBANASERVER="$DOCKERSERVER"
KIBANAUSERNAME="$DOCKERUSERNAME"
KIBANAPASSWORD="$DOCKERPASSWORD"
KIBANAEMAIL="$DOCKEREMAIL"
KIBANADOCKERSECRET="$DOCKERSECRET"
	# name to create docker secret when needed
KIBANAREGISTRYBASE="$DOCKERREGISTRYBASE"

MONITORING=monitoring
	# monitoring namespace
MONITORINGTLS="monitoring-general-tls"
	# monitoring host TLS secret
MONITORINGPEM="$CERTFILE"
	# monitoring TLS public PEM file
MONITORINGKEY="$KEYFILE"
	# monitoring TLS secret KEY file

PROMETHEUSREPO="prometheus-community"
	# Prometheus helm repository
PROMETHEUSURL="https://prometheus-community.github.io/helm-charts"
	# Prometheus helm repository URL
PROMETHEUSREL="prometheus-operator"
	# Prometheus release name
ALERTMANAGERNAME="am.$DOMAIN"
	# Alert Manager host name
ALERTMANAGERSECRET="$MONITORINGTLS"
	# Alert Manager TLS secret
GRAFANANAME="grafana.$DOMAIN"
	# Grafana host name
GRAFANASECRET="$MONITORINGTLS"
	# Grafana TLS secret
PROMETHEUSHOST="$DOCKERHOST"
PROMETHEUSUSER="$DOCKERUSER"
PROMETHEUSSERVER="$DOCKERSERVER"
PROMETHEUSUSERNAME="$DOCKERUSERNAME"
PROMETHEUSPASSWORD="$DOCKERPASSWORD"
PROMETHEUSEMAIL="$DOCKEREMAIL"
PROMETHEUSDOCKERSECRET="$DOCKERSECRET"
	# name to create docker secret when needed
PROMETHEUSREGISTRYBASE="$DOCKERREGISTRYBASE"

#
## SiteMinder Helm Repository, ID and Password
#
#SMREPO=siteminder
#SMURL="https://packages.broadcom.com/artifactory/siteminder-helm/"
SMREPO=smrepo
	# SiteMinder Helm Repo name
SMURL="https://siteminder.packages.broadcom.com/artifactory/siteminder-helm/"
	# SiteMinder Helm Repo URL
SMID=siteminder-beta
	# Authorized SiteMinder Helm Repo ID
SMPWD='eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJNUmo4OWVRNjkwSEE3eE40cXZvZ0FnajczSFJhdDNKcWcxanYyNDZHdTRnIn0.eyJzdWIiOiJqZnJ0QDAxZXA4M3F2MzFjcnowMHg2ZjZ6eWYwNHo2XC91c2Vyc1wvc2l0ZW1pbmRlci1iZXRhIiwic2NwIjoibWVtYmVyLW9mLWdyb3VwczpJTVMtU2l0ZU1pbmRlciIsImF1ZCI6ImpmcnRAMDFlcDgzcXYzMWNyejAweDZmNnp5ZjA0ejYiLCJpc3MiOiJqZnJ0QDAxZXA4M3F2MzFjcnowMHg2ZjZ6eWYwNHo2XC91c2Vyc1wvY3NwLXRva2VuLWdyYW50b3IiLCJleHAiOjE2NzM2OTY4ODcsImlhdCI6MTY1ODE0NDg4NywianRpIjoiNjkwYjMzYWMtNzdjMy00ZjVmLTlmMWMtMDRkMWMwZTg4M2Q2In0.eGKJTX3pexXiwWNbwMkdhZyuQbZDiaIJ0dbmfPNBL4nHmAs01zp2bEJU53phbgpUPlRxcvh19-8933hC1ub2Uzlp5UCovGzr2pqflnVlwcGcts_iq372DC_uU4XRp6s1cPVbrW1aFis6b9E1uFD3xxYiqVqQyF0uuvzL-iVNuzxGehr88_aineVx2xtIoap5ol13z1R_0pceoHQ5aA-OkAKrWKstcWliywiojG9UJuFkH_iV3qZ9CekBLEXQ2zofDgQ3-ve5XRTgHizBanDKNNS-H-qMO5iUoYC8jaDAXYZGpCnpwsM74zo5TOEt3hbuYILhB8miudyiJ0HDTpaNgQ'
	# Authorized SiteMinder Helm Repo Password
SMVER='--version=1.0.2899'
	# SiteMinder Helm Chart Version

#
## SiteMinder Docker Registry
#
SMDOCKERID="$SMID"
	# Docker Registry ID, it does not need to be helm repo ID
SMDOCKERPWD="$SMPWD"
	# Docker Registry Password, it does not need to be helm repo password
SMDOCKERHOST=siteminder.packages.broadcom.com
	# Docker Registry Host Name
SMDOCKERUSER=casso
	# Docker Registry User Name
SMDOCKERREPOBASE="$SMDOCKERHOST/$SMDOCKERUSER"
	# Docker Repo Base
SMDOCKERURL="https://$SMDOCKERHOST/"
	# Docker Registry URL
SMDOCKERSERVER="https://$SMDOCKERHOST/"
	# Docker Registry SERVER

#
## SiteMinder/Enclave Integration and Parameters
#
PROADPNS=pan
	# Prometheus Adapter namespace
PROADPREL="siteminder-prometheus-adapter"
	# Prometheus Adapter release name
PROADPSERVER="$DOCKERSERVER"
	# Docker Server
PROADPUSERNAME="$DOCKERUSERNAME"
PROADPPASSWORD="$DOCKERPASSWORD"
PROADPDOCKERSECRET="$DOCKERSECRET"
	# name to create docker secret when needed
PROADPREGISTRYBASE="$DOCKERREGISTRYBASE"
SMINFRANS="sminfra"
	# SiteMinder Infra namespace
SMINFRAREL="siteminder-infra"
	# SiteMinder Infra release name
SSORELEASENAME=siteminderserver
	# SiteMinder integration relase name
SMINFRASERVER="$DOCKERSERVER"
	# Docker Server
SMINFRAUSERNAME="$DOCKERUSERNAME"
SMINFRAPASSWORD="$DOCKERPASSWORD"
SMINFRADOCKERSECRET="$DOCKERSECRET"
	# name to create docker secret when needed
SMINFRAREGISTRYBASE="$DOCKERREGISTRYBASE"

#
## SiteMinder Server Components (Administrative Server and Policy Server Pods)
#
PSNS=siteminder
	# SiteMinder Policy Server Server Component namespace
PSREL="$SSORELEASENAME"
	# SiteMinder Policy Server Server Component release name
PSNAME="adminui.$DOMAIN"
	# SiteMinder Admin UI host name
PSVALUES=../ps/v1.yaml
	# SiteMinder Policy Server Server Component values yaml file

#
## SiteMinder Access Gateway (Access Gateway Pod)
#
AGNS=siteminderag
	# Access Gateway namespace
AGREL="$SSORELEASENAME"
	# Access Gateway release name
AGNAME="sps.$DOMAIN"
	# Access Gateway host name

AGVALUES=../ag/v1.yaml
	# Access Gateway values yaml file

#-------------------------------------------------------------------
## values.yaml configurable parameters
#

#
## base
#
MKEY=MasterKey123
	# Master Key Seed
SUPERID=siteminder
	# SiteMinder Super User ID
SPASS=P@ssw0rd!
	# Superuser Password
EKEY=EncryptionKey123
	# Encryption Key

#
## LDAP Policy Store
#
LDAP=LDAPHost:389
	# LDAPStoreHost:Port
RDN="ou=policystore,o=SiteMinder"
	# LDAP Root DN
BDN="uid=smadmin,ou=Admins,ou=policystore,o=SiteMinder"
	# LDAP Bind DN
BPASS="P@ssw0rd!"
	# LDAP Bind Password

#
## ODBC Policy Store
#
PDSN="pstore"
	# Policy Store Database DSN Name
PODBC="MSSQLHOST:1433"
	# Policy Store Host:Port
PDBNAME="pstore"
	# Policy Store Database Name
PDBUSER="pstoresa"
	# Policy Store Database User ID
PDBPASS="P@ssw0rd!"
	# Policy Store Database Connect Password

#
## LDAP Session Store
#
SLDAP="$LDAP"
	# LDAPSessionStoreHost:Port
SRDN="ou=sessionstore,o=SiteMinder"
	# Session Store Root DN
SBDN="uid=smadmin,ou=Admins,ou=sessionstore,o=SiteMinder"
	# Session Store Bind DN
SBPASS="P@ssw0rd!"
	# Session Store Bind Password

#
## ODBC Session Store
#
SODBC="MSSQLHOST:1433"
	# ODBCHOST:Port
SDSN='sstore'
	# Session Store DSN Name, needs to be uniq across
SDBNAME='sstore'
	# Session Store Database Name
SDBUSER='sstoresa'
	# Session Store Database User Name
SDBPASS="P@ssw0rd!"
	# Session Store Database Connect Password

#
## AWS S3
#
S3REGION="us-east-1"
	# AWS S3 Region
S3ID=
	# AWS S3 ID
S3KEY=
	# AWS S3 Access Key

#
## Config Retriever Git Server
#
GITREPOBASE="github.gwd.broadcom.net/ESD/sm2022configr.git"
	# git repository Base info
GITBRANCH=skeleton
	# git Branch to use
GITID=
	# Git user id
GITPAT=
# Git Personal Access Token (or password where PAT is not available)
	# on GitHuub,
	# Profile/Settings/Developer settings/Personal access tokens
#
## ps
#
AGTH="sps.${DOMAIN}"
	# Access Gateway Trusted Host Name
AGACO=SecureProxyServer
	# Access Gateway ACO name
AGHCO=InitialHCO
	# Access Gateway HCO name
SMREGID=$SUPERID
	# SiteMinder Registration ID
SMREGPWD=$SPASS
	# SiteMinder Registration password

#-------------------------------------------------------------------
## Support Script Functions
#

#
## b64enc
#
b64enc () {
    echo -n "$1" | base64
    }

#
## nsexist
#
nsexist() {
    local _ns=$1
    kubectl get ns -o json | \
        jq --arg s "$_ns" -r '[.items[].metadata.name]|.[]|select(. == $s)'
    }

#
## createns
#
createns() {
    local _ns=$1
    if [ -z "$(nsexist "$_ns")" ] ; then
        kubectl create ns "$_ns"
    else
        >&2 echo $_ns exists
    fi
    }

#
## repoexist
#
repoexist() {
    local _repo=$1

    helm repo list -o json | jq --arg s "$_repo" '.[] | select(.name == $s)'
    }

#
## relexist
#
relexist() {
    local _ns=$1
    local _rel=$2

    helm list -n "$_ns" -o json | jq --arg s "$_rel" '.[] | select(.name == $s)'
    }

#
## chartexist
#
chartexist() {
    local _ns=$1
    local _chart=$2

    helm list -n "$_ns" -o json | jq --arg s "$_chart" '.[] | select(.name == $s)'
    }

#
## secretexist
#
secretexist() {
    local _ns=$1
    local _secret=$2

    kubectl get secret -n "$_ns" -o json | \
        jq --arg s "$_secret" -r '[.items[].metadata.name]| .[]|select(. == $s)'
    }

#
##
#
createtls() {
    local _ns=$1
    local _secret=$2
    local _certfile=$3
    local _keyfile=$4
    if [ -z "$(secretexist "$_ns" "$_secret")" ]; then
        kubectl create secret tls "$_secret" --cert "$_certfile" --key "$_keyfile" -n "$_ns"
    else
        >&2 echo $_secret exists
    fi
    }

#
##
#
doPullSecret() {
    local _secret="$1"
    local _server="$2"
    local _user="$3"
    local _pass="$4"
    local _ns="$5"

    if [ -z "$(secretexist "$_ns" "$_secret")" ]; then
        kubectl create secret docker-registry \
            "$_secret"  -n "$_ns" \
	    --docker-server="$_server" \
	    --docker-username="$_user" \
	    --docker-password="$_pass"
    else
        >&2 echo $_secret exists
    fi
    }

#
## jaddToList
#
jaddToList() {
    local _list="$1"
    local _item="$2"

    if [[ -z "$_list" ]]; then
        echo "$_list" | jq -n --arg s "$_item" '. + [$s]'
    else
        echo "$_list" | jq --arg s "$_item" '. + [$s]'
    fi
    }
